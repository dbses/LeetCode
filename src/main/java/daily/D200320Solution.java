package daily;import utils.Assert;import java.util.Stack;/** * 150. 逆波兰表达式求值 * <p> * 输入：tokens = ["2","1","+","3","*"] * 输出：9 * 解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9 * <p> * 输入：tokens = ["4","13","5","/","+"] * 输出：6 * 解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6 * <p> * 输入：tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"] * 输出：22 * 解释： * 该算式转化为常见的中缀算术表达式为： * ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 * = ((10 * (6 / (12 * -11))) + 17) + 5 * = ((10 * (6 / -132)) + 17) + 5 * = ((10 * 0) + 17) + 5 * = (0 + 17) + 5 * = 17 + 5 * <p> * 来源：力扣（LeetCode） * 链接：https://leetcode-cn.com/problems/evaluate-reverse-polish-notation * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 */public class D200320Solution {    public int evalRPN(String[] tokens) {        Stack<Integer> stack = new Stack<>();        for (String token : tokens) {            if ("+".equals(token)) {                int a = stack.pop();                int b = stack.pop();                stack.push(b + a);            } else if ("-".equals(token)) {                int a = stack.pop();                int b = stack.pop();                stack.push(b - a);            } else if ("*".equals(token)) {                int a = stack.pop();                int b = stack.pop();                stack.push(b * a);            } else if ("/".equals(token)) {                int a = stack.pop();                int b = stack.pop();                stack.push(b / a);            } else {                stack.push(Integer.parseInt(token));            }        }        return stack.pop();    }    public static void main(String[] args) {        D200320Solution d = new D200320Solution();        String[] tokens1 = new String[]{"2", "1", "+", "3", "*"};        Assert.assertEquals(d.evalRPN(tokens1), 9);        String[] tokens2 = new String[]{"4", "13", "5", "/", "+"};        Assert.assertEquals(d.evalRPN(tokens2), 6);        String[] tokens3 = new String[]{"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"};        Assert.assertEquals(d.evalRPN(tokens3), 22);    }}